#include<stdio.h>
typedef struct
 {
  int name;
  int at;
  int burst;
  int wait;
  int TAT;
  int start;
  int remaining;
  int flag;
 }process;

process p[5],p1[5];
int n,n1;
void round_robin();
void accept();
void sjf();
int minimum();
int tq,t,i,count=0,rtwt=0,rttat=0,temp,sq=0,stwt=0,sttat=0;
  float rawt=0.0,ratat=0.0,sawt=0.0,satat=0.0;
void main()
 {

 int ch;
	//new
	clrscr();


   printf("\n1.SJF\n2.RR3.EXIT\n\n\t Enter your choice : ");
   scanf("%d",&ch);
   switch(ch)
	{
		case 1:
		  accept();
		  sjf();
			  break;
	 case 2:
		round_robin();
		break;

		 case 3:
		  break;

		 default:

		  printf("\n Invalid choice !!");
	}


 }

void accept()
 {
  int i;

  printf("\n Enter the total number of procedure : "); 
  scanf("%d",&n);

  for(i=0;i<n;i++)
   {
    printf("\n Enter the procedure name : ");
    scanf("%d",&p[i].name);    

    printf("\n Enter the arrival time : ");
    scanf("%d",&p[i].at);

     printf("\n Enter the burst time : ");
	scanf("%d",&p[i].burst);

    p[i].wait=0;
   }

  
 }

void sjf()
 {
  int i,j,tbt=0,no,k;

  for(i=0;i<n;i++)
   {
    p[i].remaining=p[i].burst;
    tbt=tbt+p[i].burst;
   }

 printf("\n");

  for(i=0;i<tbt;i++)
   {
    for(j=0;j<n;j++)//this loop determines which process are eligible to be scheduled
     {
      p[j].flag=0;

      if(p[j].at<=i && p[j].remaining>0)
       {
        p[j].flag=1;
       }
     }

   no=minimum();
   printf("%d-P%d-",i,no);
   p[no].remaining=p[no].remaining-1;


//---------------------- waiting time --------------------


for(k=0;k<n;k++)/*waiting time of the processes which have arrived before  I will added  with one unit*/
 {
  if(p[k].at<=i && p[k].remaining>0 && p[k].name!=no)
   {
    p[k].wait=p[k].wait+1;
   }
 }


}            //  main for close

  printf("%d",i);



//---------------------- turn arround time ----------------

for(k=0;k<n;k++)
 {
  p[k].TAT=p[k].burst+p[k].wait;
 }

printf("\n NAME\tArrival\tBurst\tWait\tTurn_Arround_Time");

for(k=0;k<n;k++)
 {
  stwt=stwt+p[k].wait;
  sttat=sttat+p[k].TAT;
  printf("\n P%d\t%d\t%d\t%d\t%d",p[k].name,p[k].at,p[k].burst,p[k].wait,p[k].TAT);

 }

sawt=(float)stwt/n;
satat=(float)sttat/n;
printf("\n stwt= %d\t sttat = %d\t satwt= %f\t satat= %f\n",stwt,sttat,sawt,satat);



 }

int minimum()                        //to find minimum
 {
  int i,j,min,pro_no,k;

  min=999;

  for(i=0;i<n;i++)
   {
        if(p[i].flag==1)
	{
		if(p[i].remaining<min)
		{
			min=p[i].remaining;
			pro_no=i;
		}
	}
   }
      return(pro_no);
}
//ROUND ROBIN 2.


  /*int rt[10],bt[10],wt[10],tat[10],n,tq,t;
  int i,count=0,twt=0,ttat=0,temp,sq=0;
  float awt=0.0,atat=0.0;
  clrscr();*/
void round_robin()
{  printf("Enter number of processes:");
  scanf("%d",&n1);
  printf("Enter burst time for sequences:");
  for(i=0;i<n1;i++)
   {
     scanf("%d",&p1[i].burst);
	p1[i].remaining=p1[i].burst;
	p1[i].at=0;

   }
   printf("Enter time quantum:");
   scanf("%d",&tq);
	t=0;
   while(1)
   {
     for(i=0,count=0;i<n1;i++)
     {
       temp=tq;
       if(p1[i].remaining==0)	//one process completes
       {
	 count++;
	 continue;
       }
       if(p1[i].remaining>tq)
	{
	p1[i].remaining=p1[i].remaining-tq;
	printf("%d- ",t);
	t=t+tq;
	printf("P%d-",i);
	}
       else

	if(p[i].remaining>=0)
	{
	  temp=p1[i].remaining;
	  printf("%d- ",t);
	  t=t+p1[i].remaining;
	  p1[i].remaining=0;



	  printf("P%d-",i);
	}
	
	sq=sq+temp;
	p1[i].TAT=sq;

     }
     if(n1==count)
     break;
   }
   printf("%d",t);
   for(i=0;i<n1;i++)
   {
    p1[i].wait=p1[i].TAT-p1[i].burst;
    rtwt=rtwt+p1[i].wait;
    rttat=rttat+p1[i].TAT;
   }
   rawt=(float)rtwt/n1;
   ratat=(float)rttat/n1;
   printf("\nProcess_no	Burst time	Wait time	Turn around time\n");
   for(i=0;i<n1;i++)
	printf("%d		%d		%d		%d\n",i+1,p1[i].burst,p1[i].wait,p1[i].TAT);
    printf("Avg wait time is %f Avg turn around time is %f",rawt,ratat);
    
}
