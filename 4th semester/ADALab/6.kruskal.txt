
#include<stdio.h>
struct edge
{
	int u,v,w;
};
typedef struct edge edge;
void read_edge(int m,edge e[])
{
	int i,j,k,cost;
	for(k=0;k<m;k++)
	{
		printf("Enter the edge and cost :\n");
		scanf("%d%d%d",&i,&j,&cost);
		e[k].u=i;
		e[k].v=j;
		e[k].w=cost;
		//printf("%d %d %d ",e[k].u,e[k].v,e[k].w);
	}
}
int min_edge(edge e[],int n)
{
	int small,pos,i;
	small=9999;
	pos=-1;
	for(i=0;i<n;i++)
	{
		if(e[i].w<small)
		{
			small=e[i].w;
			pos=i;
		}
	}
	return pos;
}
int find(int n,int parent[])
{
	while(parent[n]!=n)
	{
		n=parent[n];
	}
	return n;
}
void unions(int i,int j,int parent[])
{
	if(i<j)
		parent[j]=i;
	else
		parent[i]=j;
}
void kruskal(int n,edge e[],int m)
{
	int a,b,j,count,k,sum,i,parent[20];
	int t[m][2];
	int pos;
	count=0;	
	k=0;
	sum=0;
	for(i=0;i<n;i++)
	{
		parent[i]=i;
	}
	while(count!=n-1)
	{
		pos=min_edge(e,m);
		if(pos==-1)
			break;
		a=e[pos].u;
		b=e[pos].v;
		i=find(a,parent);
		j=find(b,parent);
		if(i!=j)
		{
			t[k][0]=a;
			t[k][1]=b;
			k++;
			count++;
			sum+=e[pos].w;
			unions(i,j,parent);
		}
		e[pos].w=9999;
	}
	if(count==n-1)
                {
                        printf("S.T. exits : "); 
                        for(i=0;i<n-1;i++)
                                printf("\n  %d->%d",t[i][0],t[i][1]);
                }
		printf("\nThe total cost of the minimum spanning tree is : %d",sum);
		printf("\n");
}
void main()
{
	edge e[50];
	int n,m;
	printf("Enter the no. of vertices :\n");
	scanf("%d",&n);
	printf("Enter no. of edges:\n");
	scanf("%d",&m);
	read_edge(m,e);
	kruskal(n,e,m);
}
